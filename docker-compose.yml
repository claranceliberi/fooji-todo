version: '3.7'

services:
  app-dev:
    container_name: api_dev
    build:
      context: ./backend
      target: development
      dockerfile: ./Dockerfile
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
      - 9229:9229
    command: npm run start:debug
    env_file:
      - .env
    networks:
      - webnet
    links:
      - postgres
    depends_on:
      - postgres
    restart: unless-stopped
  frontend-dev:
    container_name: frontend_dev
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/frontend/node_modules
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
      - 9229:9229
    command: npm run start:debug
    env_file:
      - .env
    networks:
      - webnet
    links:
      - postgres
    depends_on:
      - postgres
    restart: unless-stopped
  app-prod:
    container_name: api_prod
    build:
      context: ./backend
      target: production
      dockerfile: ./Dockerfile
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - ${WEB_PORT}:${WEB_PORT}
      - 9229:9229
    command: npm run serve
    env_file:
      - .env
    networks:
      - webnet
    links:
      - postgres
    depends_on:
      - app-dev
    restart: unless-stopped
  postgres:
    container_name: postgres
    image: postgres:14
    networks:
      - webnet
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      PG_DATA: /var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: -p ${POSTGRES_PORT}
    restart: unless-stopped
networks:
  webnet:
volumes:
  pgdata: